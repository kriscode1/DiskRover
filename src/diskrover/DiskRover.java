/* Disk Rover v1.2, Kristofer Christakos
 * First created: Jan 2017
 * This update: April 2017
 * Scans a storage drive and builds an interactive map of files by file size.
 */
package diskrover;

import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileStore;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Map;
import java.util.HashMap;
import javax.swing.JFileChooser;

/**
 *
 * @author Kristofer
 */
public class DiskRover extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    
    private List<LayeredPaneRectangle> layeredPaneRectangles;
    private final int RECTANGLE_TEXT_PADDING;
    private final int RECTANGLE_BORDER_PADDING = 3;
    private Stack<FileRecord> parentZoomStack;//stores zoom order for zooming out
    private Map<String, String> currentZoomLabels;//stores text for better performance
    private final ImageIcon icon;
    private RefreshCallback refreshCallback;
    
    public DiskRover() {
        initComponents();
        refreshCallback = this::recalculateRectangles;
        
        //Calculate RECTANGLE_TEXT_PADDING
        JLabel labelForFont = new JLabel("test");
        RECTANGLE_TEXT_PADDING = labelForFont.getFontMetrics(labelForFont.getFont()).getHeight();
        
        //Determine if Windows or not
        String osName = System.getProperty("os.name");
        GlobalGUI.OS_IS_WINDOWS = osName.toLowerCase().contains("windows");
        
        //Load icon
        ClassLoader cl = this.getClass().getClassLoader();
        icon = new ImageIcon(cl.getResource("resources/icon.png"));
        setIconImage(icon.getImage());
    }
    
    private void recalculateRectangles() {
        layeredPaneComponentResized(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonsPanel = new javax.swing.JPanel();
        functionalityButtonsPanel = new javax.swing.JPanel();
        selectDriveButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        showFreeSpaceButton = new javax.swing.JToggleButton();
        zoomFullButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        aboutButtonPanel = new javax.swing.JPanel();
        aboutButton = new javax.swing.JButton();
        labelsPanel = new javax.swing.JPanel();
        hoverPathLabel = new javax.swing.JLabel();
        hoverSizeLabel = new javax.swing.JLabel();
        layeredPane = new javax.swing.JLayeredPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Disk Rover");
        setIconImage(getIconImage());
        setPreferredSize(new java.awt.Dimension(1000, 650));
        setSize(new java.awt.Dimension(700, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonsPanel.setLayout(new javax.swing.BoxLayout(buttonsPanel, javax.swing.BoxLayout.LINE_AXIS));

        functionalityButtonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        selectDriveButton.setText("Select Drive");
        selectDriveButton.setToolTipText("Select which files and directories to map.");
        selectDriveButton.setFocusable(false);
        selectDriveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectDriveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDriveButtonActionPerformed(evt);
            }
        });
        functionalityButtonsPanel.add(selectDriveButton);

        reloadButton.setText("Reload");
        reloadButton.setToolTipText("Remap the entire drive.");
        reloadButton.setEnabled(false);
        reloadButton.setFocusable(false);
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });
        functionalityButtonsPanel.add(reloadButton);

        showFreeSpaceButton.setSelected(true);
        showFreeSpaceButton.setText("Toggle Free Space");
        showFreeSpaceButton.setToolTipText("Show or hide drive free space in the map.");
        showFreeSpaceButton.setFocusable(false);
        showFreeSpaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFreeSpaceButtonActionPerformed(evt);
            }
        });
        functionalityButtonsPanel.add(showFreeSpaceButton);

        zoomFullButton.setText("Zoom Out Fully");
        zoomFullButton.setToolTipText("Return to drive root.");
        zoomFullButton.setEnabled(false);
        zoomFullButton.setFocusable(false);
        zoomFullButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomFullButtonActionPerformed(evt);
            }
        });
        functionalityButtonsPanel.add(zoomFullButton);

        zoomOutButton.setText("Zoom Out");
        zoomOutButton.setToolTipText("Return to the parent directory.");
        zoomOutButton.setEnabled(false);
        zoomOutButton.setFocusable(false);
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        functionalityButtonsPanel.add(zoomOutButton);

        buttonsPanel.add(functionalityButtonsPanel);

        aboutButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        aboutButton.setText("About");
        aboutButton.setToolTipText("About Disk Rover");
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        aboutButtonPanel.add(aboutButton);

        buttonsPanel.add(aboutButtonPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(buttonsPanel, gridBagConstraints);

        hoverPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        hoverPathLabel.setText("Select a drive.");
        hoverPathLabel.setFocusable(false);

        hoverSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hoverSizeLabel.setFocusable(false);
        hoverSizeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout labelsPanelLayout = new javax.swing.GroupLayout(labelsPanel);
        labelsPanel.setLayout(labelsPanelLayout);
        labelsPanelLayout.setHorizontalGroup(
            labelsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hoverPathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 481, Short.MAX_VALUE)
                .addComponent(hoverSizeLabel)
                .addContainerGap())
        );
        labelsPanelLayout.setVerticalGroup(
            labelsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, labelsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(labelsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoverPathLabel)
                    .addComponent(hoverSizeLabel)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(labelsPanel, gridBagConstraints);

        layeredPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                layeredPaneComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layeredPaneLayout = new javax.swing.GroupLayout(layeredPane);
        layeredPane.setLayout(layeredPaneLayout);
        layeredPaneLayout.setHorizontalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );
        layeredPaneLayout.setVerticalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(layeredPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectDriveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDriveButtonActionPerformed
        //Handle Windows drives and UNIX paths differently
        //Linux treats everything as a file, so the filesystem scan needs to 
        //be more selective.
        java.util.Map<String,Object> menuItems = new java.util.HashMap<>();
        String firstItemAdded = null;
        boolean folderSelected = false;
        
        if (GlobalGUI.OS_IS_WINDOWS) {
            //Get available drives
            File[] availableRoots = File.listRoots();
            for (int driveIndex = 0; driveIndex < availableRoots.length; ++driveIndex) {
                //Check if empty CD drive before adding to the menu
                if (availableRoots[driveIndex].getTotalSpace() != 0) {
                    menuItems.put(availableRoots[driveIndex].getAbsolutePath(), null);
                    if (firstItemAdded == null) firstItemAdded = availableRoots[driveIndex].getAbsolutePath();
                }
            }
        } else {
            //Get available Linux FileStores
            Iterable<FileStore> availableFileStores = java.nio.file.FileSystems.getDefault().getFileStores();
            for (FileStore store : availableFileStores) {
                try {
                    long totalSpace = store.getTotalSpace();
                    long usedSpace = (store.getTotalSpace() - store.getUnallocatedSpace());
                    if ((totalSpace != 0) && (usedSpace != 0)) {
                        menuItems.put(store.toString(), store);
                        if (firstItemAdded == null) firstItemAdded = store.toString();
                    }
                } catch (java.io.IOException e) {
                    System.out.println("IOException while iterating available FileStores.");
                    return;
                }
            }
        }
        
        if (firstItemAdded == null) {
            JOptionPane.showMessageDialog(this, 
                "Error: No valid drives found.",
                "Drive Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Also add an option to choose a directory to scan
        final String scanFolderText = "Scan a folder...";
        menuItems.put(scanFolderText, null);

        //Ask the user to select a drive
        String selectedDrive = (String)JOptionPane.showInputDialog(this, 
                "Select the drive to scan:",    //message
                "Select Drive",                 //title
                JOptionPane.PLAIN_MESSAGE,
                null,                           //icon
                menuItems.keySet().toArray(),   //selection values, used to be rootNames, rootNames[0]
                firstItemAdded);                 //initial selection value
        System.out.println("Drive selected: " + selectedDrive);
        if (selectedDrive == null) return;//User pressed Cancel or the X
        
        //If they chose "Scan a folder..." then prompt for the folder
        if (selectedDrive.equals(scanFolderText)) {
            folderSelected = true;
            JFileChooser chooser = new JFileChooser();
            chooser.setDragEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setDialogTitle("Select Folder");
            int folderSelection = chooser.showOpenDialog(this);
            if (folderSelection == JFileChooser.APPROVE_OPTION) {
                selectedDrive = chooser.getSelectedFile().getAbsolutePath();
            } else return;//User cancelled or an error
        }
        
        if (selectedDrive == null) return;
        
        //Enable and press the reload button
        if (GlobalGUI.OS_IS_WINDOWS) {
            RecordCounter.drivePath = selectedDrive;
        } else {
            FileStore store = (FileStore) menuItems.get(selectedDrive);
            String storePath;
            if (store != null) {
                //Found the selection, now parse out the path to look through
                //ex: "/mount/path DRIVENAME"
                storePath = store.toString().trim();
                String storeName = store.name();
                System.out.println(storePath + "," + storeName + "|");
                int nameIndex = storePath.lastIndexOf(storeName);
                if (nameIndex == storePath.length()) nameIndex = -1;
                if (nameIndex > 1) {
                    storePath = storePath.substring(0, nameIndex -1).trim();
                }
            } else {
                //Must have been folder selection
                //Need to get the FileStore object since it wasn't retrieved earlier
                try {
                    store = Files.getFileStore((new File(selectedDrive)).toPath());
                } catch (IOException ex) {
                    System.out.println("Files.getFileStore() error for \"" + selectedDrive + "\"");
                    return;
                }
                storePath = selectedDrive;
            }
            
            RecordCounter.drivePath = storePath;
            RecordCounter.selectedFileStore = store;
            System.out.println("RecordCounter (drivePath,fileStore): (" + 
                    storePath + "," + store.toString() + ")");
            if (RecordCounter.drivePath == null) {
                System.out.println("drivePath is null. Serious error.");
                return;
            }
        }
        if (folderSelected) {
            showFreeSpaceButton.setSelected(false);
            showFreeSpaceButton.setEnabled(false);
        } else {
            showFreeSpaceButton.setEnabled(true);
        }
        reloadButton.setEnabled(true);
        reloadButton.doClick();
    }//GEN-LAST:event_selectDriveButtonActionPerformed

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        /*This function pretty much starts all the work:
        
        A drive has already been selected.
        Now start scanning the drive to count files, folders, and their sizes.
        The RecordCounter object creates the DriveRecord and then keeps track
        of the files, folders, and sizes with a few static fields. 
        The RecordCounter object creates a new thread to initialize the 
        DriveRecord object, and another new thread (using SwingWorker) to update
        the progress bar displayed to the user.
        After all is done, we are left with a complete DriveObject inside
        the RecordCounter (set as static).
        */
        
        //Preventing problems before this continues
        if (RecordCounter.drivePath == null) {
            System.out.println("Error, must select a drive first.");
            return;
        }
        
        //Create progress bar for popup
        javax.swing.JProgressBar progressBar = new javax.swing.JProgressBar(0, 100);
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        
        //Begin mapping the drive
        JLabel fileCountDialogText = new JLabel("Files: 0");
        JLabel folderCountDialogText = new JLabel("Folders: 0");
        FileRecord.stopWork = false;
        RecordCounter.sizeCounted = 0;
        RecordCounter.fileCount = 0;
        RecordCounter.folderCount = 0;
        RecordCounter mappingDriveTask = new RecordCounter();
        mappingDriveTask.addPropertyChangeListener(
            new java.beans.PropertyChangeListener() {
                @Override
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    int progress = mappingDriveTask.getProgress();
                    progressBar.setValue(progress);
                    fileCountDialogText.setText("Files: " + RecordCounter.fileCount);
                    folderCountDialogText.setText("Folders: " + RecordCounter.folderCount);
                }
            });
        mappingDriveTask.execute();
        
        //Show a dialog box with a progress bar
        Object[] dialogBoxContents = {fileCountDialogText, folderCountDialogText, progressBar};
        GlobalGUI.cancelButton = new JButton("Cancel");//global so I can click it from RecordCounter
        JButton[] dialogBoxButtons = {GlobalGUI.cancelButton};
        dialogBoxButtons[0].addActionListener(new ActionListener() {
            //Overly complicated way to close the dialog box opened with showOptionDialog() below
            @Override
            public void actionPerformed(ActionEvent e) {
                java.awt.Window popupWindow = javax.swing.SwingUtilities.getWindowAncestor(dialogBoxButtons[0]);
                if (popupWindow != null) {
                  popupWindow.setVisible(false);
                }
            }
        });
        //showOptionDialog() will wait for the box to close before returning
        //Either the other thread closes it (done scanning) or the user presses cancel
        JOptionPane.showOptionDialog(this,
            dialogBoxContents,
            "Scanning Drive",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,                               //icon
            dialogBoxButtons,                   //button titles
            dialogBoxButtons[0]);               //initial selection value
        if (!mappingDriveTask.isDone()) {
            //User must have pressed cancel, to close the dialog box
            FileRecord.stopWork = true;
            mappingDriveTask.cancel(true);
            return;
        }
        if (RecordCounter.drive.root.children == null) {
            //Drive with no children, don't attempt to show.
            JOptionPane.showMessageDialog(this, 
                        "Error: Drive does not contain files for display. Select another drive.",
                        "Drive Contents Error",
                        JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (showFreeSpaceButton.isSelected()) {
            //Display free space as if it was a file
            RecordCounter.drive.insertFreeSpaceRecord();
        }
        zoomFullButton.setEnabled(true);
        zoomFullButton.doClick();
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void layeredPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_layeredPaneComponentResized
        //Window was resized
        //Clear all rectangles, recalculate, and display
        if (layeredPane.getComponentCount() > 0) {
            layeredPane.removeAll();
            calculateRectangles(parentZoomStack.peek().children, 0, 0,
                layeredPane.getWidth(), layeredPane.getHeight(), 0);
        }
    }//GEN-LAST:event_layeredPaneComponentResized

    private void zoomFullButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomFullButtonActionPerformed
        //User wants to zoom out all of the way
        //Clear all rectangles, reset the zoom stack, recalculate, and display
        layeredPaneRectangles = new ArrayList();
        if (layeredPane.getComponentCount() > 0) layeredPane.removeAll();
        parentZoomStack = new Stack();
        parentZoomStack.push(RecordCounter.drive.root);
        currentZoomLabels = new HashMap();
        zoomOutButton.setEnabled(false);
        zoomFullButton.setEnabled(false);
        calculateRectangles(parentZoomStack.peek().children, 0, 0,
                layeredPane.getWidth(), layeredPane.getHeight(), 0);
    }//GEN-LAST:event_zoomFullButtonActionPerformed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        //User wants to zoom out once
        //Clear all rectangles, pop a zoom off the zoom stack to go back,
        //recalculate, and display
        layeredPaneRectangles = new ArrayList();
        if (layeredPane.getComponentCount() > 0) layeredPane.removeAll();
        parentZoomStack.pop();
        currentZoomLabels = new HashMap();
        if (parentZoomStack.peek() == RecordCounter.drive.root) {
            zoomOutButton.setEnabled(false);
            zoomFullButton.setEnabled(false);
        }
        calculateRectangles(parentZoomStack.peek().children, 0, 0,
                layeredPane.getWidth(), layeredPane.getHeight(), 0);
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    private void showFreeSpaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFreeSpaceButtonActionPerformed
        //User wants the free space "file" toggled
        if (RecordCounter.drive != null) {
            if (showFreeSpaceButton.isSelected()) {
                RecordCounter.drive.insertFreeSpaceRecord();
            } else {
                RecordCounter.drive.removeFreeSpaceRecord();
            }
            //Recalculate the rectangles and display
            zoomFullButton.setEnabled(true);
            zoomFullButton.doClick();
        }
    }//GEN-LAST:event_showFreeSpaceButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        //Display a popup dialog with About info
        Object[] aboutInfo = {
            "Disk Rover v1.1\n\n",
            "Author: Kristofer Christakos\n",
            "First created: Jan 2017\n\n",
            "For free use only."};
        JOptionPane.showMessageDialog(this,
            aboutInfo,
            "About Disk Rover",
            JOptionPane.INFORMATION_MESSAGE,
            new ImageIcon(icon.getImage().getScaledInstance(100, 100, 0)));
    }//GEN-LAST:event_aboutButtonActionPerformed
    
    private void calculateRectangles(final List<FileRecord> group, 
            final int x, final int y, 
            final int width, final int height, 
            final int layer) {
        /* Recursively divvies up space (x,y,width,height) among the group
        to form rectangles. Splits groups into two approximately equally sized
        groups, and then divides the space horizontally or vertically. 
        Creates a LayeredPaneRectangle when the group is too small, which
        is then displayed. 
        
        Assumes group is pre-sorted from largest to smallest. Each FileRecord
        automatically sorts the children in the constructor. 
        */
        
        //First perform checks to end the recursion
        if ((width <= 0) || (height <= 0)) return;//Too small to draw borders
        if (group.isEmpty()) return;//This should never happen
        
        //innerWidth*innerHeight is the space for nested rectangles to go
        int innerWidth = width - (2 * RECTANGLE_BORDER_PADDING);
        int innerHeight = height - RECTANGLE_BORDER_PADDING - RECTANGLE_TEXT_PADDING;
        if (((innerWidth <= 0) || (innerHeight <= 0)) || (group.size() == 1)) {
            //Build rectangle and add to the layered pane
            //Ignore text if rectangle is too small
            String text = "";
            FileRecord remainingRecord = group.get(0);
            if (group.size() == 1) {
                //text = "<html><body>" + remainingRecord.name + "<br>34454</body></html>";
                text = remainingRecord.name;
            }
            if ((innerWidth <= 0) || (innerHeight <= 0)) text = "";//Rectangle too small
            LayeredPaneRectangle rectangle = new LayeredPaneRectangle(remainingRecord, text, layer, x, y, width, height, refreshCallback);
            if (rectangle.file.path.length() != 0) {
                //Add specialized mouse events for complete FileRecords
                rectangle.label.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mouseEntered(java.awt.event.MouseEvent evt) {
                        rectangle.setFileColoring(true, layer);
                        String hoverPathLabelText = rectangle.file.path;
                        hoverPathLabel.setText(hoverPathLabelText);
                        String hoverSizeLabelText;
                        if (currentZoomLabels.containsKey(hoverPathLabelText)) {
                            //label text already calculated, reuse
                            hoverSizeLabelText = currentZoomLabels.get(hoverPathLabelText);
                        } else {
                            //calculate the text and store in currentZoomLabels
                            String fileSizeText = rectangle.file.getSizeForDisplay();
                            long rectSize = rectangle.file.getSize();
                            String filePercentText = FileSizeConverter.
                                calculateSizePercent(rectSize, parentZoomStack.peek().getSize());
                            hoverSizeLabelText = fileSizeText + " " + filePercentText;
                            currentZoomLabels.put(hoverPathLabelText, hoverSizeLabelText);
                        }
                        hoverSizeLabel.setText(hoverSizeLabelText);
                    }
                    @Override
                    public void mouseExited(java.awt.event.MouseEvent evt) {
                        rectangle.setFileColoring(false, layer);
                    }
                    @Override
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        if (evt.getButton() != MouseEvent.BUTTON1) return;//Not a left click
                        if (rectangle.file.children != null) {
                            if (rectangle.file == RecordCounter.drive.root) {
                                parentZoomStack.clear();
                            } else {
                                zoomOutButton.setEnabled(true);
                                zoomFullButton.setEnabled(true);
                            }
                            parentZoomStack.push(rectangle.file);
                            currentZoomLabels = new HashMap();
                            layeredPaneRectangles = new ArrayList();
                            if (layeredPane.getComponentCount() > 0) layeredPane.removeAll();
                            calculateRectangles(parentZoomStack.peek().children, 
                                    0, 0,
                                    layeredPane.getWidth(), layeredPane.getHeight(), 0);
                        }
                    }
                });
                if (!rectangle.file.isDirectory) {
                    rectangle.setTextAlignmentToCenter();
                }
            } else {
                //Add specialized handling of a free space record
                rectangle.setSpaceColoring(false);
                rectangle.setTextAlignmentToCenter();
                rectangle.label.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mouseEntered(java.awt.event.MouseEvent evt) {
                        rectangle.setSpaceColoring(true);
                        String hoverPathLabelText = rectangle.file.name;
                        hoverPathLabel.setText(hoverPathLabelText);
                        String hoverSizeLabelText;
                        if (currentZoomLabels.containsKey(hoverPathLabelText)) {
                            //label text already calculated, reuse
                            hoverSizeLabelText = currentZoomLabels.get(hoverPathLabelText);
                        } else {
                            //calculate the text and store in currentZoomLabels
                            String fileSizeText = rectangle.file.getSizeForDisplay();
                            long rectSize = rectangle.file.getSize();
                            String filePercentText = FileSizeConverter.
                                calculateSizePercent(rectSize, parentZoomStack.peek().getSize());
                            hoverSizeLabelText = fileSizeText + " " + filePercentText;
                            currentZoomLabels.put(hoverPathLabelText, hoverSizeLabelText);
                        }
                        hoverSizeLabel.setText(hoverSizeLabelText);
                    }
                    @Override
                    public void mouseExited(java.awt.event.MouseEvent evt) {
                        rectangle.setSpaceColoring(false);
                    }
                });
            }
            layeredPane.add(rectangle.label, new Integer(layer));
            layeredPaneRectangles.add(rectangle);
            
            //Calculate the inner rectangles if FileRecord is a directory
            if ((group.size() == 1) && (remainingRecord.isDirectory)) {
                calculateRectangles(remainingRecord.children, 
                        x + RECTANGLE_BORDER_PADDING, 
                        y + RECTANGLE_TEXT_PADDING, 
                        innerWidth, innerHeight, 
                        layer + 1);
            }
            return;
        }//Else the group is not small enough in number for drawing a rectangle
        //Keep splitting the area
        
        //Split group into two groups of almost-even size
        List<FileRecord> group1 = new ArrayList();
        List<FileRecord> group2 = new ArrayList();
        long group1Size = 0;
        long group2Size = 0;
        for (FileRecord file : group) {
            if (file.getSize() == 0) continue;
            if (group1Size <= group2Size) {
                group1.add(file);
                group1Size += file.getSize();
            } else {
                group2.add(file);
                group2Size += file.getSize();
            }
        }
        
        //Calculate how much area each group gets
        double group1Percent = (double) group1Size / (group1Size + group2Size);
        if (width <= height) {
            //Split the rectangle horizontally
            int group1Height = (int) (group1Percent * height);
            if (group1Percent >= 0.5) {
                //group1 on top
                calculateRectangles(group1, 
                                    x, y, 
                                    width, group1Height, 
                                    layer);
                calculateRectangles(group2, 
                                    x, y + group1Height, 
                                    width, height - group1Height, 
                                    layer);
            } else {
                //group1 on bottom
                calculateRectangles(group2, 
                                    x, y, 
                                    width, height - group1Height, 
                                    layer);
                calculateRectangles(group1, 
                                    x, y + height - group1Height, 
                                    width, group1Height, 
                                    layer);
            }
        } else {
            //Split the rectangle vertically
            int group1Width = (int) (group1Percent * width);
            if (group1Percent >= 0.5) {
                //group1 on left
                calculateRectangles(group1, 
                                    x, y, 
                                    group1Width, height, 
                                    layer);
                calculateRectangles(group2, 
                                    x + group1Width, y, 
                                    width - group1Width, height, 
                                    layer);
            } else {
                //group1 on right
                calculateRectangles(group2, 
                                    x, y, 
                                    width - group1Width, height, 
                                    layer);
                calculateRectangles(group1, 
                                    x + width - group1Width, y, 
                                    group1Width, height, 
                                    layer);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiskRover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiskRover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiskRover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiskRover.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DiskRover().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JPanel aboutButtonPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel functionalityButtonsPanel;
    private javax.swing.JLabel hoverPathLabel;
    private javax.swing.JLabel hoverSizeLabel;
    private javax.swing.JPanel labelsPanel;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JButton reloadButton;
    private javax.swing.JButton selectDriveButton;
    private javax.swing.JToggleButton showFreeSpaceButton;
    private javax.swing.JButton zoomFullButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
}
